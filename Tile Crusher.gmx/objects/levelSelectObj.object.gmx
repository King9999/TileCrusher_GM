<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set background 
script_execute(setBackground, global.backgroundType);

xOffset = 64;
yOffset = 176;
//nextPage = false;   //used to display levels 51-100 when true.

//buttons

if (global.halfLevelsComplete)
{
    nextButton = instance_create(room_width / 2 - 120, room_height - 120, nextBtnObj);
    backButton = instance_create(nextButton.x + 150, room_height - 120, prevBtnObj);
}
else
{
    backButton = instance_create(room_width / 2 - 65, room_height - 120, prevBtnObj);
}

/** Display levels **/
levels = ds_grid_create(MAX_COLS, MAX_ROWS);
numberGrid = ds_grid_create(MAX_COLS, MAX_ROWS);    //used to store level numbers
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//manipulate the background to produce an infinite scrolling effect
if (global.backgroundType == 0)
{
    if (global.backgroundSprite.x &gt; room_width)
    {
        global.backgroundSprite.x = -room_width + 1; //1 is added to eliminate gap between images
    }
    
    if (global.bgCopy.x &gt; room_width)
    {
        global.bgCopy.x = -room_width + 1;
    }
}


//levels

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>levelCount = 1;
if (global.exPage)
{
    levelCount = 51;
}

for (var i = 0; i &lt; ds_grid_height(numberGrid); i++)
{
    for (var j = 0; j &lt; ds_grid_width(numberGrid); j++)
    {
        ds_grid_set(numberGrid, j, i, levelCount);
        levelCount++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scroll the background
if (global.backgroundType == 0)
{
    global.backgroundSprite.x++;
    global.bgCopy.x++;
}

//button check
if (!instance_exists(screenFadeObj))
{
    if (mouse_check_button_released(mb_left))
    {
        //back
        if (mouse_x &gt;= backButton.x &amp;&amp; mouse_x &lt;= backButton.x + backButton.sprite_width)
        {
            if (mouse_y &gt;= backButton.y &amp;&amp; mouse_y &lt;= backButton.y + backButton.sprite_height)
            {
                sound_play(select);
                global.nextScreen = menuScreen;
                instance_create(0, 0, screenFadeObj);
            }
        }
        
        //next page button
        if (global.halfLevelsComplete)
        {
            if (mouse_x &gt;= nextButton.x &amp;&amp; mouse_x &lt;= nextButton.x + nextButton.sprite_width)
            {
               if (mouse_y &gt;= nextButton.y &amp;&amp; mouse_y &lt;= nextButton.y + nextButton.sprite_height)
               {
                   sound_play(select);
                   global.exPage = !global.exPage;
                   var file = working_directory + "records.ini";
                   ini_open(file);
                   ini_write_real("Page State", "exPage", global.exPage);
                   ini_close();
               }
            }
        }
        
        //check which level was clicked.
        var k = 0;
        for (var i = 0; i &lt; ds_grid_width(levels); i++)
        {
            for (var j = 0; j &lt; ds_grid_height(levels); j++)
            {
                if (mouse_x &gt;= i * 90 + xOffset &amp;&amp; mouse_x &lt;= i * 90 + xOffset + TILE_SIZE)
                {
                    if(mouse_y &gt;= j * 90 + yOffset &amp;&amp; mouse_y &lt;= j * 90 + yOffset + TILE_SIZE)
                    {
                        show_debug_message("Clicked level " + string(ds_grid_get(numberGrid, i, j)));
                        
                        //is level locked?
                        k = ds_grid_get(numberGrid, i, j) - 1;
                        if (!global.halfLevelsComplete)
                        {
                            if (!global.lockedLevel[k])
                            {
                            
                                //player is no longer a first-time player
                                if (global.firstTimePlaying)
                                {
                                    global.firstTimePlaying = false;
                                    ini_open(working_directory + "records.ini");
                                    ini_write_real("Progress", "firstTimePlaying", global.firstTimePlaying);
                                }
                                sound_play(select);
                                global.selectedLevel = ds_grid_get(numberGrid, i, j);
                                global.nextScreen = gameScreen;
                                instance_create(0, 0, screenFadeObj);
                            }
                            else
                            {
                                //play sound, level is locked.
                                sound_play(noAccess);
                            }
                        }
                        else    //all levels are unlocked, just go to level.
                        {
                            global.selectedLevel = ds_grid_get(numberGrid, i, j);
                            global.nextScreen = gameScreen;
                            instance_create(0, 0, screenFadeObj);
                        }
                    }
                }
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(ds_type_grid, levels))
{
    ds_grid_destroy(levels);
    show_debug_message("level grid destroyed");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(ds_type_grid, levels))
{
    ds_grid_destroy(levels);
    show_debug_message("level grid destroyed");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//title
draw_sprite(select_sprite, 0, room_width / 2 - 170, 90);

draw_set_font(numberFont);
//draw_set_color(c_white);
for (var i = 0; i &lt; ds_grid_width(levels); i++)
{
    for (var j = 0; j &lt; ds_grid_height(levels); j++)
    {
        draw_sprite(target_sprite, 0, i * 90 + xOffset, j * 90 + yOffset);
        
        //position numbers and change their colour according to their status.
        var p = ds_grid_get(numberGrid, i, j) - 1;
        if (!global.halfLevelsComplete)
        {
            if (global.lockedLevel[p])
            {
                draw_set_color(c_dkgray);
            }
            else if (global.finishedLevel[p])
            {
                draw_set_color(c_aqua);
            }
            else  //level is available but hasn't been completed.
            {
                draw_set_color(c_white);
            }
        }
        else
        {
            if (global.finishedLevel[p])
            {
                draw_set_color(c_aqua);
            }
            else
            {
                draw_set_color(c_white);
            }
        }
        
        
        if (ds_grid_get(numberGrid, i, j) == 100)
        {            
            draw_text(i * 90 + xOffset - 5, j * 90 + yOffset, string(ds_grid_get(numberGrid, i, j)));
        }
        else if (ds_grid_get(numberGrid, i, j) &gt; 9)
        {
            draw_text(i * 90 + xOffset + 5, j * 90 + yOffset, string(ds_grid_get(numberGrid, i, j)));
        }
        else
        {
            draw_text(i * 90 + xOffset + 18, j * 90 + yOffset, string(ds_grid_get(numberGrid, i, j)));
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
