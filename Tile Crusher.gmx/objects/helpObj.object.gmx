<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set background 
script_execute(setBackground, global.backgroundType);

//title
options = instance_create(room_width / 2 - 120, 160, optionObj);

//buttons
backButton = instance_create(room_width / 2 - 65, room_height - 120, prevBtnObj);
tutorialButton = instance_create(room_width / 6 + 100, 300, tutorialBtnObj);
resetButton = instance_create(room_width / 6 + 170, 400, resetBtnObj);
bgmButton = instance_create(tutorialButton.x + 150, tutorialButton.y, bgmBtnObj);
bgButton = instance_create(tutorialButton.x + 300, tutorialButton.y, bgBtnObj);
aboutButton = instance_create(resetButton.x + 150, resetButton.y, aboutBtnObj);

displayMsg = false;  //used to display BGM name or record reset message
recordReset = false;
bgmChanged = false;
alarm[0] = 120;      //timer for reset record display
alarm[1] = 120;      //timer for bgm change display
resetAlpha = 1;
bgmAlpha = 1;

//music title
trackName = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//manipulate the background to produce an infinite scrolling effect
if (global.backgroundType == 0)
{
    if (global.backgroundSprite.x &gt; room_width)
    {
        global.backgroundSprite.x = -room_width + 1; //1 is added to eliminate gap between images
    }
    
    if (global.bgCopy.x &gt; room_width)
    {
        global.bgCopy.x = -room_width + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scroll the background
if (global.backgroundType == 0)
{
    global.backgroundSprite.x++;
    global.bgCopy.x++;
}

//button check
if (!instance_exists(screenFadeObj))
{
    if (mouse_check_button_released(mb_left))
    {
        //back
        if (mouse_x &gt;= backButton.x &amp;&amp; mouse_x &lt;= backButton.x + backButton.sprite_width)
        {
            if (mouse_y &gt;= backButton.y &amp;&amp; mouse_y &lt;= backButton.y + backButton.sprite_height)
            {
                //room_goto(menuScreen);
                global.nextScreen = menuScreen;
                instance_create(0, 0, screenFadeObj);
            }
        }
        
        //change background
        if (mouse_x &gt;= bgButton.x &amp;&amp; mouse_x &lt;= bgButton.x + bgButton.sprite_width)
        {
            if (mouse_y &gt;= bgButton.y &amp;&amp; mouse_y &lt;= bgButton.y + bgButton.sprite_height)
            {
                if (global.backgroundType &lt; MAX_BACKGROUNDS - 1)
                {
                    global.backgroundType++;
                }
                else
                {
                    global.backgroundType = 0;
                }
                          
                script_execute(setBackground, global.backgroundType);
            }
        }
        
        //tutorial
        if (mouse_x &gt;= tutorialButton.x &amp;&amp; mouse_x &lt;= tutorialButton.x + tutorialButton.sprite_width)
        {
           if (mouse_y &gt;= tutorialButton.y &amp;&amp; mouse_y &lt;= tutorialButton.y + tutorialButton.sprite_height)
           {
               //room_goto(tutorialScreen);
               global.previousScreen = helpScreen;
               global.nextScreen = tutorialScreen;
               instance_create(0, 0, screenFadeObj);
           }
        }
        
        //about button
        if (mouse_x &gt;= aboutButton.x &amp;&amp; mouse_x &lt;= aboutButton.x + aboutButton.sprite_width)
        {
           if (mouse_y &gt;= aboutButton.y &amp;&amp; mouse_y &lt;= aboutButton.y + aboutButton.sprite_height)
           {
               //room_goto(tutorialScreen);
               global.nextScreen = aboutScreen;
               instance_create(0, 0, screenFadeObj);
           }
        }
        
        //reset records
        if (mouse_x &gt;= resetButton.x &amp;&amp; mouse_x &lt;= resetButton.x + resetButton.sprite_width)
        {
            if (mouse_y &gt;= resetButton.y &amp;&amp; mouse_y &lt;= resetButton.y + resetButton.sprite_height)
            {
                var file = working_directory + "records.ini";
                script_execute(resetRecords, file);
                recordReset = true;
            }
        }
        
        //change BGM
        if (mouse_x &gt;= bgmButton.x &amp;&amp; mouse_x &lt;= bgmButton.x + bgmButton.sprite_width)
        {
            if (mouse_y &gt;= bgmButton.y &amp;&amp; mouse_y &lt;= bgmButton.y + bgmButton.sprite_height)
            {
                global.trackFile++;
                if (global.trackFile &gt;= MAX_TRACKS)
                {
                    global.trackFile = -1;  //no music
                }
                trackName = script_execute(changeBgm, global.trackFile);
                bgmChanged = true;
                alarm[1] = 120;
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer update</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (recordReset)
{
    alarm[0]--;
    if (alarm[0] &lt; 0)
    {
        alarm[0] = -1;
        resetAlpha -= 0.05;
        if (resetAlpha &lt;= 0)
        {
            recordReset = false;
            resetAlpha = 1;
            alarm[0] = 120;
        }
    }
}

if (bgmChanged)
{
    alarm[1]--;
    if (alarm[1] &lt; 0)
    {
        alarm[1] = -1;
        bgmAlpha -= 0.05;
        if (bgmAlpha &lt;= 0)
        {
            bgmChanged = false;
            bgmAlpha = 1;
            alarm[1] = 120;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(gameFont);
if (recordReset)
{
    draw_text_ext_color(room_width / 2 - 80, 30, "Records reset.", 0, 300, c_red, c_red, c_red, c_red, resetAlpha);
}

if (bgmChanged)
{
    draw_text_ext_color(room_width / 2 - 80, 30, "Now playing: " + trackName, 0, 600, c_lime, c_lime, c_lime, c_lime, bgmAlpha);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
