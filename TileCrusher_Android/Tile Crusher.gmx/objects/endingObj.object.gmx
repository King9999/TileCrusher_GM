<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//in the ending, I display images from when the game was first made, along with the credits. Whenever 
//the player goes to the credits screen from the title screen, this screen opens instead of the default.

//old screenshots
screenShot[0] = instance_create(0, 0, oldObj1);
screenShot[1] = instance_create(0, 0, oldObj2);
screenShot[2] = instance_create(0, 0, oldObj3);
screenShot[3] = instance_create(0, 0, oldObj4);
screenShot[4] = instance_create(0, 0, oldObj5);

alarm[0] = 0;       //used to cycle through the different shots.
alarm[1] = 0;       //timer used to stop credits from scrolling.
current = 0;        //iterator

congratsText = "Congratulations!  You've proven yourself to be a #master tile crusher!  I hope"
                + " you found the game challenging #and satisfying!  Thank you for your support!";
textAlpha = 1;
creditsRolling = false;

for (var i = 1; i &lt; array_length_1d(screenShot); i++)
{
    screenShot[i].visible = false;
}

role = ds_list_create();
name = ds_list_create();

//roles
ds_list_add(role, "Game Design");
ds_list_add(role, "Graphics");
ds_list_add(role, "Programming");
ds_list_add(role, "Level Design");
ds_list_add(role, "Music");
ds_list_add(role, "Sound FX");
ds_list_add(role, "Special Thanks");

//names. corresponds to roles
ds_list_add(name, "Mike Murray");
ds_list_add(name, "Mike Murray");
ds_list_add(name, "Mike Murray");
ds_list_add(name, "Mike Murray");
ds_list_add(name, "Matt McFarland - mattmcfarland.com");
ds_list_add(name, "Freesound.org"
                + '#Tim "Corsica_S" Kahn'
                + "#kellieskitchen"
                + "#Anton Woldhek - http://woldhek.eu/anton");
ds_list_add(name, "TriOS College - trios.com"
                + "#Robert French - robertfrench.ca"
                + "#Christopher Palfreyman"
                + "#Stack Overflow - stackoverflow.com"
                + "#Shoryuken.com - shoryuken.com");
                
finalCredit = "Copyright 2012-2014 Mike Murray"
                + "#All rights reserved"
                + "#mmking9999.com"
                + "#@MikeADMurray"
                + "#Thank you for playing!  This is only" 
                + "#the beginning. Watch me...";

rolePos = 480 * global.scaleY;
namePos = 520 * global.scaleY;

//button
backButton = instance_create(0, room_height / 1.1 * global.scaleY, backBtnObj);

//play music
sound_volume(ending, 0.4);
sound_loop(ending);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0] &gt; room_speed * 5)
{
    //change screenshot
    screenShot[current].visible = false;
    
    if (current == array_length_1d(screenShot) - 1)
    {
        current = 0;
    }
    else
    {
        current++;
    }
    screenShot[current].visible = true;
    alarm[0] = 0;
}

if (alarm[1] &gt; room_speed * 10)
{
    alarm[1] = room_speed * 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (alarm[1] &gt;= room_speed * 10)
{
    rolePos -= 2;
    namePos -= 2;
    
    if (rolePos &lt; -930 * global.scaleY)
    {
        rolePos = -930 * global.scaleY;
        namePos = -890 * global.scaleY;
    }
}

//back button
if (!instance_exists(screenFadeObj))
{
    if (mouse_check_button_released(mb_left))
    {
       if (mouse_x &gt;= backButton.x &amp;&amp; mouse_x &lt;= backButton.x + backButton.sprite_width)
       {
           if (mouse_y &gt;= backButton.y &amp;&amp; mouse_y &lt;= backButton.y + backButton.sprite_height)
           {
                sound_play(select);
               global.nextScreen = titleScreen;
               instance_create(0, 0, screenFadeObj);
           }
       }
   }
}

alarm[0]++;
alarm[1]++;

if (alarm[1] &gt;= room_speed * 10)
{
    textAlpha -= 0.1;
    if (textAlpha &lt;= 0)
    {
        creditsRolling = true;
        textAlpha = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(role, ds_type_list))
{
    ds_list_destroy(role);
    ds_list_destroy(name);
}

//stop music
sound_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(role, ds_type_list))
{
    ds_list_destroy(role);
    ds_list_destroy(name);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(creditsFont);

if (!creditsRolling)
{
   // draw_text(10, room_height / 2, congratsText);
    draw_text_ext_color(10 * global.scaleX, room_height / 2, congratsText, 30, 1000, c_white, c_white, c_white, c_white, textAlpha);
}
else
{

    if (!instance_exists(screenFadeObj))
    {
        draw_set_font(creditsFont);
        for (var i = 0; i &lt; ds_list_size(role); i++)
        {
            draw_set_colour(c_aqua);
            if (i == 6)
            {
                draw_text(225 * global.scaleX, rolePos + (i * 92), ds_list_find_value(role, i));
            }
            else
            {
                draw_text(225 * global.scaleX, rolePos + (i * 80), ds_list_find_value(role, i));
            }
            
            draw_set_colour(c_white);
            if (i == 5)
            {
                draw_text(225 * global.scaleX, namePos + (i * 77), ds_list_find_value(name, i));
            }
            else if (i == 6)
            {
                draw_text(225 * global.scaleX, namePos + (i * 92), ds_list_find_value(name, i));
            }
            else
            {
                draw_text(225 * global.scaleX, namePos + (i * 80), ds_list_find_value(name, i));
            }
            
            finalPos = namePos + (i * 80);
            
        }
        
        draw_text(225 * global.scaleX, finalPos + 500, finalCredit);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(screenFadeObj))
{
  
 sound_play(select);
global.nextScreen = titleScreen;
instance_create(0, 0, screenFadeObj);
 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
